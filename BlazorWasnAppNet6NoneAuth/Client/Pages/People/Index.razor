@page "/people"
@inject HttpClient http
@inject IJSRuntime js

<h3>People</h3>

<div>
    <a class="btn btn-success" href="people/create">New Person</a>
</div>

@if(people == null)
{
    <text>Loading...</text>
}
else if(people.Length == 0)
{
    <text>There's No record returned from DB!'...</text>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Id</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in people)
            {
                <tr>
                    <td>
                        <a class="btn btn-success" href="people/edit/@person.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => DeletePerson(person.Id))">Delete</button>
                    </td>
                    <td>@person.Id</td>
                    <td>@person.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    Person[] people{ get; set; }

    //this line below is just like the ole OnLoad() from the WebForm days back. 
    protected override async Task OnInitializedAsync()
    {
        await LoadPeople();
    }
    async Task LoadPeople()
    {
        people = await http.GetFromJsonAsync<Person[]>("api/people");
        // people = new Person[]
        // {
        //     new Person(){Id = 1, Name="Test 1"},
        //     new Person(){Id = 2, Name="Test 2"}
        // };
    }


    async Task DeletePerson(int personId)
    {
        // Add Javascript delete confirmation

        var selectedPerson = people.FirstOrDefault(s => s.Id == personId);
        if (selectedPerson != null)
        {
            if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete: {selectedPerson.Name}?"))
            {
                await http.DeleteAsync($"api/people/{personId}");
                await LoadPeople();
            }
        }

    }


}
